// ==========================================================================
// HTML5 BP Helper classes
// ==========================================================================

// Eric Meyer's awesome strip unit helper
// http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass/12335841#12335841
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

// convert to rem
// @param $base (optional): base font size
// based on http://www.stubbornella.org/content/2013/07/01/easy-peasy-rem-conversion-with-sass/
@function rem($px-size, $base: $base-font-size--default) {
  @return #{strip-units($px-size/$base)}rem;
}

@function percent($px-size, $base: $base-font-size--default) {
  @return (strip-units($px-size/$base-font-size--default))*100%;
}

// based on https://github.com/bitmanic/rem
// @param $px-values: number or list of numbers (0 3px 3px 0)
// -> NONZERO VALUES MUST HAVE UNITS
@mixin rem($property, $px-values, $base: $base-font-size--default) {
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: rem($px-values, $base);
  } @else {
    // Create an empty list that we can dump values into
    $rem-values: ();
    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of( $value ) != "number" {
        $rem-values: append($rem-values, $value); 
      } @else {
        $rem-values: append($rem-values, rem($value, $base)); 
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values; 
  } 
}

// ==================================================================================
// General layout helpers
// ==================================================================================

// Responsive columns
// -> Requires Singularity.gs
// -------------------------------------------------------------------------------

@mixin grid-span-media($default, $xsm: null, $sm: null, $med: null, $lg: null, $center: false) {

  $widths: $xsm, $sm, $med, $lg;
  // $breakpoints: global var, see _settings.scss
  // $grid-cols: global var, see _settings.scss
  
  // set mobile width first with $default
  @if ($center == false) {
    @include grid-span($default);
  } @else if ($center == true) {
    @include grid-span-center($default);
  }
  
  // now set up media queries for the others
  @for $i from 1 to length($widths) {
    
    $width: nth($widths, $i);
    $bp: nth($breakpoints, $i);
    $cols: nth($grid-cols, $i);
    
    // null values are skipped (ie, no css for them)
    @if ($width != null) {
      @include breakpoint($bp) {
        @if ($center == false) {
          @include grid-span($width);
        } @else if ($center == true) {
          @include grid-span-center($width, $cols);
        }
      }
    }
  }
}

// Center an element within the grid
// -> Requires Singularity.gs
// -------------------------------------------------------------------------------

@mixin grid-span-center($cols, $total-cols: $grid-columns--xsmall, $output-style: 'isolate') {
  @include grid-span($cols, ((($total-cols - $cols)/2) + 1));
}

// Add default layout margins at various breakpoints
// -> Requires _settings.scss (and set up for Singularity.gs/Breakpoint)
// -------------------------------------------------------------------------------

@mixin base-grid-margins($property: margin, $full: false) {
  @include rem($property, 0 $base-margin--xsmall, $base-font-size--xsmall);

  @include breakpoint($screen--small) {
    @include rem($property, 0 $base-margin--small, $base-font-size--small);
  }

  @include breakpoint($screen--medium) {
    @include rem($property, 0 $base-margin--medium, $base-font-size--medium);
  }
  
  @include breakpoint($screen--large) {
    @if ($full == true) {
      @include rem($property, 0 $base-margin--large, $base-font-size--large);
    } @else {
      margin: 0 auto;
      @include rem(max-width, $grid-width - $base-margin--large, $base-font-size--large);
    }
  }
}

// make an inline (horizontal) list and vertically center child elements
// use this on the li elements or just inside them (ie anchors)
@mixin inline-list--centered($height: 100%) {
  @include rem(height, $height);
  display: table-cell;
  vertical-align: middle;
  text-align: center;
}

@mixin inline-dl {
  & > dt, & > dd {
    display: inline;
  }
  & > dt {
    margin-right: em(6);
  }
  & > dd {
    margin-left: 0;
    margin-right: em(12);
  }
}

// vertically center the children of an inline block element
@mixin inline-block--centered($height: 100%) {
  @include inline-block;
  vertical-align: middle;
  height: 100%;

  &:before {
    content: '';
    display: inline-block;  
    vertical-align: middle;
    height: 100%;
  }
}

%list--unstyled {
  margin: 0;
  padding: 0;
}

// ==================================================================================
// Special effects & CSS graphical stuff
// ==================================================================================

// change opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// image replacement
@mixin ir($src, $w, $h) {
  @include hide-text;
  @include size($w $h);
  // @include rem(width, $w);
  // @include rem(height, $h);
  display: block;
  background: url(#{$base-path-img}#{$src}) center center no-repeat;
}

// use webkit/ie filters to make an image grayscale
// http://www.cheesetoast.co.uk/add-grayscale-images-hover-css-black-white/
// http://stackoverflow.com/questions/609273/convert-an-image-to-grayscale-in-html-css
%img-grayscale {
  @extend %base-transition;
  filter: grayscale(100%);
  -webkit-filter: grayscale(100%);  /* For Webkit browsers */
  filter: gray;  /* For IE 6 - 9 */

  &:hover {
    @extend %img-grayscale-kill;
  }
}

%img-grayscale-kill {
  filter: grayscale(0%);
  -webkit-filter: grayscale(0%);
  filter: none;
}

@mixin triangle--centered($dir: down, $side: top, $loc: 0, $width: 10px, $color: white, $selector: after) {
  &:#{$selector} {
    @include triangle($width, $color, $dir);
    content: " ";
    position: absolute;
    #{$side}: $loc;

    @if ($side == top){
      left: 50%;
      margin-left: -($width/2);
    } @else if ($side == bottom) {
      left: 50%;
      bottom: -#{width};
      margin-left: -($width/2);
    } @else if ($side == left) {
      top: 50%;
      margin-top: -($width/2);
    } @else if ($side == right) {
      top: 50%;
      margin-top: -($width/2);
    }
  }
}

// ==========================================================================
// HTML5 BP Helper classes
// ==========================================================================

/*
 * Hide from both screenreaders and browsers: h5bp.com/u
 */

@mixin hidden {
  display: none;
  visibility: hidden;
}

// restore the 'hidden' css
@mixin restore-visible($display: block) {
  display: $display;
  visibility: visible;
}

/*
 * Hide only visually, but have it available for screenreaders: h5bp.com/v
 */

@mixin visuallyhidden($focusable: "false") {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;

  @if $focusable == "true" {

   // Extends the .visuallyhidden class to allow the element to be focusable
   // when navigated to via the keyboard: h5bp.com/p

    &:active, &:focus {
      clip: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      position: static;
      width: auto;
    }
  }
}

/*
 * Hide visually and from screenreaders, but maintain layout
 */

@mixin invisible {
  visibility: hidden;
}

/* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   These examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */

// @media only screen and (min-width: 35em) {
//     /* Style adjustments for viewports that meet the condition */
// }

// @media print,
//        (-o-min-device-pixel-ratio: 5/4),
//        (-webkit-min-device-pixel-ratio: 1.25),
//        (min-resolution: 120dpi) {
//     /* Style adjustments for high resolution devices */
// }